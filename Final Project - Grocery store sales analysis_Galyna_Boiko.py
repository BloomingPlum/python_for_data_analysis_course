#!/usr/bin/env python
# coding: utf-8

# # Вітаю на фінальному проєкті!
# Протягом курсу ми навчились завантажувати дані в Python, трансформувати їх, чистити, агрегувати, знаходити з допомогою даних відповіді на наші питання. 
# Задача фінального проєкту - продемонструвати той рівень роботи з даними, на якому ви є зараз. 
# 
# Цей ноутбук буде присвячений аналізу даних з файла `Grocery DataBase.xlsx`, який є в папці `Дані` на Диску. Так, це Excel файл, але ми можемо дуже просто завантажувати дані з нього у Python. Покажу пару команд для роботи з Excel файлом.

# Для початку встановимо бібліотеку, яка потрібна для роботи з Excel файлами з pandas. Можна встановити тут, або в терміналі, але якщо Ви встановлюєте в терміналі, то після того треба перезапустити ядро (Kernel) ноутбуку, аби бібліотека точно підтягнулась. Іноді підтягується і без того, але це на випадок, що робити, якщо компілятор каже, що її не бачить.

# In[20]:


get_ipython().system('pip install openpyxl')


# In[21]:


get_ipython().system(' pip install xlrd')


# In[22]:


import pandas as pd


# Ось так можемо переглянути, які є листки в Excel файлі:

# In[23]:


# замініть на шлях до файлу на своєму комп`ютері

path_to_file = 'data/FP/GroceryDatabase.xlsx' 


# In[26]:


xl = pd.ExcelFile(path_to_file, engine='openpyxl')
xl.sheet_names


# А так можемо зчитати конкретний листок:

# In[27]:


xl.parse('Fact Summary')


# Читати дані можна і з Pandas, але тут немає можливості переглянути наявні листки, а також довше відбувається читання даних.

# In[35]:


df = pd.read_excel(path_to_file, engine='openpyxl')


# В файлі ви знайдете самі дані та опис колонок.   
# 
# **Задача**: Уявіть, що Вам дали цей набір даних з питанням "Що корисного ми можемо з них взяти для розвитку нашого бізнесу?". То Вам необхідно розказати бізнесу історію про ці дані у форматі
# 1. питання, яке Вас як робітника цього бізнесу, який дуже вболіває за його успіх, цікавить щодо цих даних
# 2. код для відповіді на це питання
# 3. висновки, які я можу зробити з огляду на результат виконання коду: які рішення ми можемо прийняти щодо подальших кроків в аналізі або які рекомендації Ви б дали бізнесу виходячи з результатів.
# 
# **Необхідно** поставити до даних _мінімум_ 10 бізнес-питань, при цьому зробивши   
# - початковий аналіз даних: їх розмір, структура, наявність пропущених значень та що з ними зробити, зміна типів даних там, де це доречно зробити (наприклад, якщо колонка завантажилась як тип string, а з опису видно, що там має бути float) - ця частина не входить у бізнес-питання, але є необхідною при аналізі даних.  
# - _мінімум_ 1 зведену таблицю або її аналог
# - _мінімум_ 5 візуалізацій, 3 з яких мають різний тип (наприклад, scatter plot, line plot, pair plot)
# 
# В даному мінімум-наборі немає вимоги на використання SQL та тестування статистичних гіпотез. Але якщо Вам хочеться потренуватись, то Ви можете це зробити скориставшись pandasql, а також перевірити, чи є відмінність між двома групами у якомусь показнику з допомогою тестування статистичних гіпотез. Останнє найбільш доречно, якщо, наприклад, ми беремо чоловіків і жінок, бачимо що у них доволі схожі середні чеки, але наче відрізняються. Аби зрозуміти, чи різниця статистично значущою, можна це перевірити з допомогою тестування стат. гіпотез.
# 
# Питанням може бути як "Яка є кількість унікальних чеків в цьому наборі даних?" так і щось значно складніше. Якщо у Вас складне питання, і аби відповісти на нього Ви мали відповісти на 3 менших питання (зробити якісь трансформації над даними, подивитись щось), то це рахується як 3 питання з 10 необхідних у завданні. Звісно ж Ви можете зробити більше за встановлений мінімум - все буде перевірено :)
# 
# Тут є великий простір для Вашої фантазії. **Тому рекомендація:** виділіть на це завданні певну кількість годин (наприклад, середнє значення по тому, скільки у Вас займало виконання домашніх завдань в курсі, але я рекомендую не менше 2х годин роботи)
# і поставте собі за ціль всю роботу вмістити в цю кількість годин.
# Це дозволить Вам управляти своїм часом, пріоритизувати питання, які ставите до даних. І так часто є в роботі: коли ми не знаємо, що ми шукаємо, ми ставимо обмеження по часу (задача типу spike) і робимо все, що встигнемо, за цей час.
# 
# По закінченню - завантажуємо ноутбук на git і додаємо посилання в здачу роботи в Eduflow. 
# До речі, з часом, вам може захотітись доповнити цей ноутбук, коли арсенал ваших навичок по роботі з даними розшириться. І це буде чудова ідея!
# 
# **Успіхів!**

# Спочатку подивимось на розмір даних та проаналізуємо їх типи: 

# In[102]:


type(df)


# In[103]:


df_shape = df.shape
df_shape


# In[39]:


df.head()


# In[40]:


df.dtypes


# В принципі, практично нічого в типах даних змінювати не потрібно. 

# In[86]:


df.head(50)


# Також можна переглянути, чи є пропущені значення. Як бачимо, в цьому дадасеті їх немає. 

# In[55]:


missing_values = df.isnull().sum()
missing_values


# 1. Можна подивитися в яких містах які групи товарів найбільш прибуткові. 

# In[93]:


pivot_payment_method_margin = df.pivot_table(index='City', columns="Category", values ='Profit Margin')
pivot_payment_method_margin.style.background_gradient(axis=1)


# Зі зведеною таблиці бачимо однакові тренди в усіх містах - група товарів Wines, Beers & Spirits є найбільш прибутковою. Дві інші категорії, які генерують найбільше прибутків - Mother & Baby та Meat & Seafood.  

# 2. Також можемо подивитися які саме товари є найбільш прибутковими. Це в переважній більшості вино і шампанське, але також є дитяче зарчування на 9 позиції. Можливо, є сенс продавати більше таких товарів. 

# In[168]:


average_profit_margin = df.groupby('Items')['Profit Margin'].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(12, 7))
average_profit_margin.plot(kind='barh', color='purple')
plt.title('10 товарів з найвищою прибутковістю')
plt.xlabel('Середня прибутковість')
plt.ylabel('Назва товару')
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()


# 3. Можна також подивитися якою в процентному відношенні є прибутковість кожної групи товарів і побачити які категорії товарів в процентному відношенні генерують найбільші прибутки. Як ми бачимо нижче, категорія Frozen приносить трохи більше 15% всіх прибутків, також найбільш прибутковими категоріями з цієї точки зору є категорія Beauty та Bekary and Breakfast. 

# In[197]:


profit_by_category = df.groupby('Category')['Profit Margin'].sum()

plt.figure(figsize=(10, 7))
plt.pie(profit_by_category, labels=profit_by_category.index, autopct='%1.1f%%', startangle=140, wedgeprops=dict(width=0.3))
plt.title('Розподіл прибутковості по категоріях товарів')
plt.show()


# 4. Ми також можемо подивитися і проаналізувати, в які дні тижня більше покупців. На графіку не можна прослідкувати однакової тенденції по всіх містах. Тобто, планування маркетингових заходів краще робити, спираючись на дані конкретного міста.  

# In[196]:


import pandas as pd
import matplotlib.pyplot as plt

df['Day_of_Week'] = df['Date'].dt.day_name()

grouped_data = df.groupby(['City', 'Day_of_Week']).size().unstack().reindex(columns=order_of_days)

ax = grouped_data.transpose().plot(kind='bar', figsize=(14, 8), width=0.8)
ax.set_title('Попит в містах в залежності від дня тижня.')
ax.set_xlabel('Day of the Week')
ax.set_ylabel('Number of Purchases')
ax.set_xticklabels(order_of_days, rotation=45)
ax.grid(axis='y', linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()


# 5. На наступному графіку видно динаміку щомісячного прибутку. Можна побачити, що прибутки стабільно зростають. Пік прибутковості припадає на новорічний період, після чого кожного року йде спад. Можливо, є сенс простимулювати попит після новорічних свят. 

# In[198]:


monthly_sales = df.groupby(['Year', 'Month'])['Profit Margin'].sum().reset_index()
plt.figure(figsize=(15, 7))
plt.plot(monthly_sales['Year'].astype(str) + '-' + monthly_sales['Month'].astype(int).astype(str), monthly_sales['Profit Margin'], marker='o')
plt.xticks(rotation=45)
plt.title('Динаміка щомісячного прибутку')
plt.xlabel('Рік - місяць')
plt.ylabel('Прибутковість')
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.tight_layout()
plt.show()


# 6. На графіку нижче можна побачити покупці якого віку приносять найбільше прибутку - найбільш активним покупцям близько 20 років. Найменше прибутку приносять люди близько 60 років та старше. Можна сфокусуватися на молодій аудиторії, а можна подумати як простимулювати більш старших покупців робити покупки (наприклад, за допомогою доставки товарів).  

# In[201]:


import matplotlib.pyplot as plt

# Create a histogram using profit margin as weights
plt.figure(figsize=(8, 6))
plt.hist(df['Age'], bins=20, weights=df['Profit Margin'], color='green', edgecolor='black')

# Set the title and labels
plt.title('Розподіл прибутку за віком')
plt.xlabel('Вік')
plt.ylabel('Сума прибутку')
plt.tight_layout()
plt.show()


# 7.Також можна подивитися на розподіл за статтю. Як ми бачимо, чоловіків в 4 рази менше, ніж жінок. Це дає нам уявлення про те, хто є найголовнішою цільовою аудиторією і як краще рекламувати товари. 

# In[123]:


plt.figure(figsize=(8, 6))
df['Gender'].value_counts().plot(kind='bar', color=['lightpink', 'lightskyblue'])
plt.title('Розподіл покупців за ознакою статі')
plt.xlabel('Стать')
plt.ylabel('Кількість транзакцій')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()


# 8. Ми також можемо переглянути який розподіл чоловіків/жінок в покупців віку 15-23. Як ми бачимо, кількість жінок цього віку переважає в 5 разів. Це ще раз підтверджує, що має сенс для цієї вікової групи робити маркетингові кампанії саме для жінок. 

# In[208]:


age_filtered_df = df[(df['Age'] >= 15) & (df['Age'] <= 23)]
gender_counts = age_filtered_df['Gender'].value_counts()
print(gender_counts)


# 9. Також можна подивитися, чи впливає форма оплати на користування покупцями картами лояльності. Як ми бачимо з графіку нижче, балів на карті лояльності трохи більше у покупців, які користуються банківською картою, але різниця незначна. 

# In[203]:


plt.figure(figsize=(40, 30))

sns.boxplot(x="Payment Mode", y="Loyalty Card Points", data=df)

plt.title("Кількість балів на картках лояльності в залежності форми оплати", fontsize=30)

plt.xlabel("Форма оплати", fontsize=25)
plt.ylabel("Бали на карті лояльності", fontsize=25)

plt.xticks(fontsize=30)

plt.show()


# 10. Також можна порівняти чи є якась різниця між чоловіками та жінками у використанні картки лояльності. Як ми бачимо з графіку, різниці практично немає, у чоловіків навіть трішки більше балів. 

# In[210]:


plt.figure(figsize=(8, 6))

sns.boxplot(data=df, x='Gender', y='Loyalty Card Points', palette=['lightskyblue', 'lightpink'])

plt.title('Бали на картці лояльності в залежності від статі')
plt.xlabel('Стать')
plt.ylabel('Бали на картці лояльності')

plt.tight_layout()
plt.show()

